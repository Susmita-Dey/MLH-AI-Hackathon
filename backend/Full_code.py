# -*- coding: utf-8 -*-
"""transcribe.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IXdlrmNndiBt-7uc0SkjR-8bis0FDCHc

# Import Packages
"""



import whisper
import openai
from pytube import YouTube
import PyPDF2 
from braille import textToBraille as convertText
from gtts.tts import gTTS as speak

"""# Different Input methods

The program can take in in file formats of `txt`,`pdf`,`mp3`, `mp4`, `mpeg`, `mpga`,`m4a`,`wav` and `webm`.

### 1. YouTube links
"""

# formats the file path for YouTube links

def get_filepath( path ) -> str:
  path2 = ""
  for i in range(len(path)):
    if path[i].isalnum() or path[i] ==' ':
      path2 += str(path[i])
      
  return path2 + '.mp4'

path = input(str("Enter the YouTube link :\t"))

save_path ="/content/"
yt = YouTube(path)
mp4 = yt.streams.get_highest_resolution()
mp4.download(save_path)
save_path += get_filepath(mp4.title)

model = whisper.load_model("tiny")
text_file = model.transcribe( save_path )

with open('text.txt','a') as f:
  f.writelines(text_file['text'])

"""### 2. File upload method"""



"""### 3. PDF method"""

def extract_text_from_pdf(file_path):
    with open(file_path, 'rb') as pdf_file:
        pdf_reader = PyPDF2.PdfReader(pdf_file)
        text = ''
        for page_num in range(len(pdf_reader.pages)):
            page = pdf_reader.pages[page_num]
            text += page.extract_text()
    return text

FILE_PATH = ""
text_file = extract_text_from_pdf(FILE_PATH)

with open('text.txt','a') as f:
  f.writelines(text_file)

"""### 4. Text files"""

FILE_PATH = ""

with open( FILE_PATH , 'r' ) as f:
  text = f.read()

with open ( 'text.txt', 'w') as f:
  f.writelines()

"""# GPT summarizer"""

import re

# Set up the OpenAI API credentials
openai.api_key = "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"

# Define a function to summarize the text using GPT-3
def davinci(text):
    # Preprocess the input text to remove any extra line breaks or whitespace
    text = re.sub('\n+', '\n', text)
    text = text.strip()

    # Use the OpenAI GPT-3 API to summarize the text
    prompt = "You are a text summarizer that summarizes text from videos, audio clips and books. Provide a text summary in respective length of the text.Let the summary be in bullet points where ever necessary. Here's the text:\n\n" + text
    response = openai.Completion.create(
        engine="text-davinci-002",
        prompt=prompt,
        max_tokens=512,
        temperature=0.5,
        n = 1,
        stop=None,
        timeout=20
    )
    # Extract the summary from the API response
    summary = response.choices[0].text.strip()

    return summary

def gpt( text ):

    # Preprocess the input text to remove any extra line breaks or whitespace
    text = re.sub('\n+', '\n', text)
    text = text.strip()

    # Use OpenAI gpt 3.5 turbo to summarize the text
    response = openai.ChatCompletion.create(
        model = "gpt-3.5-turbo",
        messages =[
            {'role': 'system', 'content': "You are a text summarizer that summarizes text from videos, audio clips and books. Provide a text summary in respective length of the text. Let the summary be in bullet points where ever necessary. Here's the text"},
            {'role' : 'system', 'content' : text}
        ]
    )
            

    # Extract the summary from the API response
    summary = response['choices'][0]['message']['content'].strip()

    return summary

# Read in the input text file
with open("text.txt", "r") as f:
    text = f.read()

# Summarize the text using GPT-3
summary = gpt(text)

# Print the summary to the console
print(summary)

# Store the summary in text file
with open ('summary.txt','w') as f:
  f.writelines(summary)

b_summary = convertText(summary)

with open ('b_summary.RTF', 'w') as f:
  f.writelines(b_summary)

au_ac = input ( 
    "Enter the accent you the auio to be in: \nus - United States \nuk - United Kindom \nin - Indian\n").lower().strip()

if au_ac == 'us':
  audio = speak(summary,lang='en',tld='us')
elif au_ac == 'uk':
  audio = speak(summary,lang='en',tld='co.uk')
else:
  audio = speak(summary,lang='en',tld='co.in')
audio.save('audio.mp3')

